// Generated by CoffeeScript 1.7.1
(function() {
  var Loader, Loaders, events, resolver, type,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require("events");

  resolver = require("./resolver");

  type = require("type-component");

  Loader = (function() {

    /*
     */
    function Loader(_loadable, _loaders) {
      this._loadable = _loadable;
      this._loaders = _loaders;
      this._required = this._loadable.require || [];
      this._load = this._loadable.plugin;
    }


    /*
     */

    Loader.prototype.require = function(path) {
      return this._required;
    };


    /*
     */

    Loader.prototype.load = function() {
      var moduleName, modules, _i, _len, _ref, _ref1;
      if (this.exports) {
        return this.exports;
      }
      modules = [];
      _ref = this._required;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        moduleName = _ref[_i];
        modules.push(this._loaders.load(moduleName));
      }
      return this.exports = (_ref1 = this._load.apply(this, modules)) != null ? _ref1 : true;
    };

    return Loader;

  })();

  Loaders = (function(_super) {
    __extends(Loaders, _super);


    /*
     */

    function Loaders(packages) {
      this.packages = packages;
      this._resolvers = [];
      this._loaders = {};
    }


    /*
     */

    Loaders.prototype.resolve = function(path) {
      var loadable, _i, _len, _ref, _results;
      if (this._loaders[path]) {
        return this._loaders[path];
      }
      _ref = resolver.resolve(path);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        loadable = _ref[_i];
        _results.push(this._loaders[loadable.name] = new Loader(loadable, this));
      }
      return _results;
    };


    /*
     */

    Loaders.prototype.load = function(search) {
      var modules, multi, name, pkg, t, tester;
      t = type(search);
      if (t === "array") {
        multi = true;
        search = search[0];
      }
      modules = [];
      if (typeof search === "string") {
        pkg = this._loadString(search);
        modules = [pkg];
        this.packages[search] = pkg;
      } else {
        tester = this.getTester(search);
        for (name in this._loaders) {
          if (tester.test(name)) {
            modules.push(this.load(name));
            if (!multi) {
              break;
            }
          }
        }
      }
      if (multi) {
        return modules;
      } else {
        return modules[0];
      }
    };


    /*
     */

    Loaders.prototype.getTester = function(search) {
      if (search.test || search instanceof RegExp) {
        return search;
      } else if (typeof search === "function") {
        return {
          test: search
        };
      }
    };


    /*
     */

    Loaders.prototype._loadString = function(name) {
      var loader;
      this.resolve(name);
      loader = this._loaders[name];
      if (!loader) {
        throw new Error("cannot load '" + name + "'");
      }
      return this.packages[name] = loader.load();
    };


    /*
     */

    Loaders.prototype.loadAll = function(next) {
      var name, _results;
      _results = [];
      for (name in this._loaders) {
        _results.push(this.load(name));
      }
      return _results;
    };

    return Loaders;

  })(events.EventEmitter);

  module.exports = Loaders;

}).call(this);
